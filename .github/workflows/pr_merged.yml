on:
  pull_request_target:
    branches: [master, main]
    types: [closed]

permissions:
  pull-requests: write

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: "debug"
        run: echo $JSON 
        env:
          JSON: ${{ toJSON(github.event.pull_request) }}
     
  comment_rollback:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }} 
    steps: 
      # TODO: reach out somewhere and get an actual version.
      - name: "Fetch current version"
        id: current_version
        run: echo "version=1.0.0" >> $GITHUB_OUTPUT
        
      - uses: actions/github-script@v6
        env:
          ROLLBACK_VERSION: ${{ steps.current_version.outputs.version }}
          DEPLOYMENT_VERSION: ${{ github.run_number }} 
          DEPLOYMENT_NAME: ${{ github.event.repository.name }}
          NAMESPACE: ${{ github.ref_name}}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Whoosh! âœ¨
               There's your code, off she goes! ðŸ§™

               Prior to your deployment, the build version was: ${ROLLBACK_VERSION}
               This has been overwritten with: ${$DEPLOYMENT_VERSION}

               You can rollback with the following command:
                  kubectl rollout undo deployment ${DEPLOYMENT_NAME}-deployment
                
               Or, to set rollback using an explicit image tag:
                  kubectl set image deployment/${DEPLOYMENT_NAME} container=${DEPLOYMENT_NAME} --record=true --namespace=${NAMESPACE}
              `
            })
